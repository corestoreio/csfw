syntax = "proto3";
package store;

import "entities_gen.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
option go_package = "store";

message ProtoIsAllowedStoreIDRequest {
	uint32 RunMode = 1;
	uint32 StoreID = 2;
}

message ProtoIsAllowedStoreIDResponse {
	bool IsAllowed = 1;
	string StoreCode = 2;
}

message ProtoRunModeRequest {
	uint32 RunMode = 1;
}

message ProtoIDRequest {
	uint32 ID = 1;
}

message ProtoStoreIDWebsiteIDResponse {
	uint32 WebsiteID = 2;
	uint32 StoreID = 1;
}

message ProtoStoreIDbyCodeRequest {
	uint32 RunMode = 1;
	string StoreCode = 2;
}

service StoreService {
	rpc IsAllowedStoreID(ProtoIsAllowedStoreIDRequest) returns (ProtoIsAllowedStoreIDResponse){
		option (google.api.http) = {
            post: "/api/v1/stores/isAllowedStoreID"
            body: "*"
        };
	};
	rpc DefaultStoreView(google.protobuf.Empty) returns (Store){
		option (google.api.http) = {
            post: "/api/v1/stores/defaultStoreView"
        };
	};
	rpc DefaultStoreID(ProtoRunModeRequest) returns (ProtoStoreIDWebsiteIDResponse){
		option (google.api.http) = {
            post: "/api/v1/stores/defaultStoreID"
            body: "*"
        };
	};
	rpc StoreIDbyCode(ProtoStoreIDbyCodeRequest) returns (ProtoStoreIDWebsiteIDResponse){
		option (google.api.http) = {
            post: "/api/v1/stores/storeIDByCode"
            body: "*"
        };
	};
	rpc AllowedStores(ProtoRunModeRequest) returns (Stores){
		option (google.api.http) = {
            post: "/api/v1/stores/allowedStores"
            body: "*"
        };
	};

	rpc AddWebsite(StoreWebsite) returns (google.protobuf.Empty) {
		option (google.api.http) = {
            post: "/api/v1/stores/website"
            body: "*"
        };
	}
	rpc DeleteWebsite(ProtoIDRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
            delete: "/api/v1/stores/website"
        };
	}
	rpc WebsiteByID(ProtoIDRequest) returns (StoreWebsite) {
		option (google.api.http) = {
            get: "/api/v1/stores/website"
        };
	}
	rpc ListWebsites(google.protobuf.Empty) returns (StoreWebsites) {
		option (google.api.http) = {
            get: "/api/v1/stores/websites"
        };
	}

	rpc AddGroup(StoreGroup) returns (google.protobuf.Empty) {
		option (google.api.http) = {
            post: "/api/v1/stores/group"
            body: "*"
        };
	}
	rpc DeleteGroup(ProtoIDRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
            delete: "/api/v1/stores/group"
        };
	}
	rpc GroupByID(ProtoIDRequest) returns (StoreGroup) {
		option (google.api.http) = {
            get: "/api/v1/stores/group"
        };
	}
	rpc ListGroups(google.protobuf.Empty) returns (StoreGroups) {
		option (google.api.http) = {
            get: "/api/v1/stores/groups"
        };
	}

	rpc AddStore(Store) returns (google.protobuf.Empty) {
		option (google.api.http) = {
            post: "/api/v1/stores/store"
            body: "*"
        };
	}
	rpc DeleteStore(ProtoIDRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
            delete: "/api/v1/stores/store"
        };
	}
	rpc StoreByID(ProtoIDRequest) returns (Store) {
		option (google.api.http) = {
            get: "/api/v1/stores/store"
        };
	}
	rpc ListStores(google.protobuf.Empty) returns (Stores) {
		option (google.api.http) = {
            get: "/api/v1/stores/stores"
        };
	}
}
