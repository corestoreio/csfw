// +build  csall http json

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package store

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson55774c79DecodeGithubComCorestoreioPkgStore(in *jlexer.Lexer, out *StoreWebsiteCollection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*StoreWebsite, 0, 8)
					} else {
						out.Data = []*StoreWebsite{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *StoreWebsite
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(StoreWebsite)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson55774c79EncodeGithubComCorestoreioPkgStore(out *jwriter.Writer, in StoreWebsiteCollection) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StoreWebsiteCollection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson55774c79EncodeGithubComCorestoreioPkgStore(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StoreWebsiteCollection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson55774c79EncodeGithubComCorestoreioPkgStore(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StoreWebsiteCollection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson55774c79DecodeGithubComCorestoreioPkgStore(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StoreWebsiteCollection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson55774c79DecodeGithubComCorestoreioPkgStore(l, v)
}
func easyjson55774c79DecodeGithubComCorestoreioPkgStore1(in *jlexer.Lexer, out *StoreWebsite) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "websiteID":
			out.WebsiteID = uint32(in.Uint32())
		case "code":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Code).UnmarshalJSON(data))
			}
		case "name":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Name).UnmarshalJSON(data))
			}
		case "sortOrder":
			out.SortOrder = uint32(in.Uint32())
		case "defaultGroupID":
			out.DefaultGroupID = uint32(in.Uint32())
		case "isDefault":
			out.IsDefault = bool(in.Bool())
		case "storeGroup":
			if in.IsNull() {
				in.Skip()
				out.StoreGroup = nil
			} else {
				if out.StoreGroup == nil {
					out.StoreGroup = new(StoreGroupCollection)
				}
				(*out.StoreGroup).UnmarshalEasyJSON(in)
			}
		case "store":
			if in.IsNull() {
				in.Skip()
				out.Store = nil
			} else {
				if out.Store == nil {
					out.Store = new(StoreCollection)
				}
				(*out.Store).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson55774c79EncodeGithubComCorestoreioPkgStore1(out *jwriter.Writer, in StoreWebsite) {
	out.RawByte('{')
	first := true
	_ = first
	if in.WebsiteID != 0 {
		const prefix string = ",\"websiteID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.WebsiteID))
	}
	if true {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Code).MarshalJSON())
	}
	if true {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Name).MarshalJSON())
	}
	if in.SortOrder != 0 {
		const prefix string = ",\"sortOrder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.SortOrder))
	}
	if in.DefaultGroupID != 0 {
		const prefix string = ",\"defaultGroupID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.DefaultGroupID))
	}
	if in.IsDefault {
		const prefix string = ",\"isDefault\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsDefault))
	}
	if in.StoreGroup != nil {
		const prefix string = ",\"storeGroup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.StoreGroup).MarshalEasyJSON(out)
	}
	if in.Store != nil {
		const prefix string = ",\"store\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Store).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StoreWebsite) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson55774c79EncodeGithubComCorestoreioPkgStore1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StoreWebsite) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson55774c79EncodeGithubComCorestoreioPkgStore1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StoreWebsite) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson55774c79DecodeGithubComCorestoreioPkgStore1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StoreWebsite) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson55774c79DecodeGithubComCorestoreioPkgStore1(l, v)
}
func easyjson55774c79DecodeGithubComCorestoreioPkgStore2(in *jlexer.Lexer, out *StoreGroupCollection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*StoreGroup, 0, 8)
					} else {
						out.Data = []*StoreGroup{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *StoreGroup
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(StoreGroup)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Data = append(out.Data, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson55774c79EncodeGithubComCorestoreioPkgStore2(out *jwriter.Writer, in StoreGroupCollection) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Data {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StoreGroupCollection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson55774c79EncodeGithubComCorestoreioPkgStore2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StoreGroupCollection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson55774c79EncodeGithubComCorestoreioPkgStore2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StoreGroupCollection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson55774c79DecodeGithubComCorestoreioPkgStore2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StoreGroupCollection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson55774c79DecodeGithubComCorestoreioPkgStore2(l, v)
}
func easyjson55774c79DecodeGithubComCorestoreioPkgStore3(in *jlexer.Lexer, out *StoreGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "groupID":
			out.GroupID = uint32(in.Uint32())
		case "websiteID":
			out.WebsiteID = uint32(in.Uint32())
		case "name":
			out.Name = string(in.String())
		case "rootCategoryID":
			out.RootCategoryID = uint32(in.Uint32())
		case "defaultStoreID":
			out.DefaultStoreID = uint32(in.Uint32())
		case "code":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Code).UnmarshalJSON(data))
			}
		case "storeWebsite":
			if in.IsNull() {
				in.Skip()
				out.StoreWebsite = nil
			} else {
				if out.StoreWebsite == nil {
					out.StoreWebsite = new(StoreWebsite)
				}
				(*out.StoreWebsite).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson55774c79EncodeGithubComCorestoreioPkgStore3(out *jwriter.Writer, in StoreGroup) {
	out.RawByte('{')
	first := true
	_ = first
	if in.GroupID != 0 {
		const prefix string = ",\"groupID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.GroupID))
	}
	if in.WebsiteID != 0 {
		const prefix string = ",\"websiteID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.WebsiteID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.RootCategoryID != 0 {
		const prefix string = ",\"rootCategoryID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.RootCategoryID))
	}
	if in.DefaultStoreID != 0 {
		const prefix string = ",\"defaultStoreID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.DefaultStoreID))
	}
	if true {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Code).MarshalJSON())
	}
	if in.StoreWebsite != nil {
		const prefix string = ",\"storeWebsite\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.StoreWebsite).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StoreGroup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson55774c79EncodeGithubComCorestoreioPkgStore3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StoreGroup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson55774c79EncodeGithubComCorestoreioPkgStore3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StoreGroup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson55774c79DecodeGithubComCorestoreioPkgStore3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StoreGroup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson55774c79DecodeGithubComCorestoreioPkgStore3(l, v)
}
func easyjson55774c79DecodeGithubComCorestoreioPkgStore4(in *jlexer.Lexer, out *StoreCollection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*Store, 0, 8)
					} else {
						out.Data = []*Store{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *Store
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(Store)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Data = append(out.Data, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson55774c79EncodeGithubComCorestoreioPkgStore4(out *jwriter.Writer, in StoreCollection) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Data {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StoreCollection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson55774c79EncodeGithubComCorestoreioPkgStore4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StoreCollection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson55774c79EncodeGithubComCorestoreioPkgStore4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StoreCollection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson55774c79DecodeGithubComCorestoreioPkgStore4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StoreCollection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson55774c79DecodeGithubComCorestoreioPkgStore4(l, v)
}
func easyjson55774c79DecodeGithubComCorestoreioPkgStore5(in *jlexer.Lexer, out *Store) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "storeID":
			out.StoreID = uint32(in.Uint32())
		case "code":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Code).UnmarshalJSON(data))
			}
		case "websiteID":
			out.WebsiteID = uint32(in.Uint32())
		case "groupID":
			out.GroupID = uint32(in.Uint32())
		case "name":
			out.Name = string(in.String())
		case "sortOrder":
			out.SortOrder = uint32(in.Uint32())
		case "isActive":
			out.IsActive = bool(in.Bool())
		case "storeGroup":
			if in.IsNull() {
				in.Skip()
				out.StoreGroup = nil
			} else {
				if out.StoreGroup == nil {
					out.StoreGroup = new(StoreGroup)
				}
				(*out.StoreGroup).UnmarshalEasyJSON(in)
			}
		case "storeWebsite":
			if in.IsNull() {
				in.Skip()
				out.StoreWebsite = nil
			} else {
				if out.StoreWebsite == nil {
					out.StoreWebsite = new(StoreWebsite)
				}
				(*out.StoreWebsite).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson55774c79EncodeGithubComCorestoreioPkgStore5(out *jwriter.Writer, in Store) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StoreID != 0 {
		const prefix string = ",\"storeID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.StoreID))
	}
	if true {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Code).MarshalJSON())
	}
	if in.WebsiteID != 0 {
		const prefix string = ",\"websiteID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.WebsiteID))
	}
	if in.GroupID != 0 {
		const prefix string = ",\"groupID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.GroupID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.SortOrder != 0 {
		const prefix string = ",\"sortOrder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.SortOrder))
	}
	if in.IsActive {
		const prefix string = ",\"isActive\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.StoreGroup != nil {
		const prefix string = ",\"storeGroup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.StoreGroup).MarshalEasyJSON(out)
	}
	if in.StoreWebsite != nil {
		const prefix string = ",\"storeWebsite\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.StoreWebsite).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Store) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson55774c79EncodeGithubComCorestoreioPkgStore5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Store) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson55774c79EncodeGithubComCorestoreioPkgStore5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Store) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson55774c79DecodeGithubComCorestoreioPkgStore5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Store) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson55774c79DecodeGithubComCorestoreioPkgStore5(l, v)
}
