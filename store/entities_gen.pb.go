// +build csall proto

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entities_gen.proto

package store

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func (m *Store) Reset()         { *m = Store{} }
func (m *Store) String() string { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()    {}
func (*Store) Descriptor() ([]byte, []int) {
	return fileDescriptor_entities_gen_2e5cb26d38efad33, []int{0}
}
func (m *Store) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Store) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Store.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Store) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store.Merge(dst, src)
}
func (m *Store) XXX_Size() int {
	return m.Size()
}
func (m *Store) XXX_DiscardUnknown() {
	xxx_messageInfo_Store.DiscardUnknown(m)
}

var xxx_messageInfo_Store proto.InternalMessageInfo

func (m *Stores) Reset()         { *m = Stores{} }
func (m *Stores) String() string { return proto.CompactTextString(m) }
func (*Stores) ProtoMessage()    {}
func (*Stores) Descriptor() ([]byte, []int) {
	return fileDescriptor_entities_gen_2e5cb26d38efad33, []int{1}
}
func (m *Stores) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stores) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stores.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Stores) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stores.Merge(dst, src)
}
func (m *Stores) XXX_Size() int {
	return m.Size()
}
func (m *Stores) XXX_DiscardUnknown() {
	xxx_messageInfo_Stores.DiscardUnknown(m)
}

var xxx_messageInfo_Stores proto.InternalMessageInfo

func (m *StoreGroup) Reset()         { *m = StoreGroup{} }
func (m *StoreGroup) String() string { return proto.CompactTextString(m) }
func (*StoreGroup) ProtoMessage()    {}
func (*StoreGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_entities_gen_2e5cb26d38efad33, []int{2}
}
func (m *StoreGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StoreGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreGroup.Merge(dst, src)
}
func (m *StoreGroup) XXX_Size() int {
	return m.Size()
}
func (m *StoreGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreGroup.DiscardUnknown(m)
}

var xxx_messageInfo_StoreGroup proto.InternalMessageInfo

func (m *StoreGroups) Reset()         { *m = StoreGroups{} }
func (m *StoreGroups) String() string { return proto.CompactTextString(m) }
func (*StoreGroups) ProtoMessage()    {}
func (*StoreGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_entities_gen_2e5cb26d38efad33, []int{3}
}
func (m *StoreGroups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreGroups.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StoreGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreGroups.Merge(dst, src)
}
func (m *StoreGroups) XXX_Size() int {
	return m.Size()
}
func (m *StoreGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreGroups.DiscardUnknown(m)
}

var xxx_messageInfo_StoreGroups proto.InternalMessageInfo

func (m *StoreWebsite) Reset()         { *m = StoreWebsite{} }
func (m *StoreWebsite) String() string { return proto.CompactTextString(m) }
func (*StoreWebsite) ProtoMessage()    {}
func (*StoreWebsite) Descriptor() ([]byte, []int) {
	return fileDescriptor_entities_gen_2e5cb26d38efad33, []int{4}
}
func (m *StoreWebsite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreWebsite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreWebsite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StoreWebsite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreWebsite.Merge(dst, src)
}
func (m *StoreWebsite) XXX_Size() int {
	return m.Size()
}
func (m *StoreWebsite) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreWebsite.DiscardUnknown(m)
}

var xxx_messageInfo_StoreWebsite proto.InternalMessageInfo

func (m *StoreWebsites) Reset()         { *m = StoreWebsites{} }
func (m *StoreWebsites) String() string { return proto.CompactTextString(m) }
func (*StoreWebsites) ProtoMessage()    {}
func (*StoreWebsites) Descriptor() ([]byte, []int) {
	return fileDescriptor_entities_gen_2e5cb26d38efad33, []int{5}
}
func (m *StoreWebsites) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreWebsites) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreWebsites.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StoreWebsites) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreWebsites.Merge(dst, src)
}
func (m *StoreWebsites) XXX_Size() int {
	return m.Size()
}
func (m *StoreWebsites) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreWebsites.DiscardUnknown(m)
}

var xxx_messageInfo_StoreWebsites proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Store)(nil), "store.Store")
	proto.RegisterType((*Stores)(nil), "store.Stores")
	proto.RegisterType((*StoreGroup)(nil), "store.StoreGroup")
	proto.RegisterType((*StoreGroups)(nil), "store.StoreGroups")
	proto.RegisterType((*StoreWebsite)(nil), "store.StoreWebsite")
	proto.RegisterType((*StoreWebsites)(nil), "store.StoreWebsites")
}
func (m *Store) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Store) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StoreID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.StoreID))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.WebsiteID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.WebsiteID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.GroupID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.SortOrder != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.SortOrder))
	}
	if m.IsActive {
		dAtA[i] = 0x38
		i++
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StoreGroup != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.StoreGroup.Size()))
		n1, err := m.StoreGroup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.StoreWebsite != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.StoreWebsite.Size()))
		n2, err := m.StoreWebsite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Stores) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stores) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEntitiesGen(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StoreGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.GroupID))
	}
	if m.WebsiteID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.WebsiteID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.RootCategoryID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.RootCategoryID))
	}
	if m.DefaultStoreID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.DefaultStoreID))
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintEntitiesGen(dAtA, i, uint64(m.Code.Size()))
	n3, err := m.Code.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.StoreWebsite != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.StoreWebsite.Size()))
		n4, err := m.StoreWebsite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *StoreGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreGroups) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEntitiesGen(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StoreWebsite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreWebsite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WebsiteID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.WebsiteID))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEntitiesGen(dAtA, i, uint64(m.Name.Size()))
	n5, err := m.Name.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.SortOrder != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.SortOrder))
	}
	if m.DefaultGroupID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.DefaultGroupID))
	}
	if m.IsDefault {
		dAtA[i] = 0x30
		i++
		if m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Stores != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.Stores.Size()))
		n6, err := m.Stores.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.StoreGroups != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEntitiesGen(dAtA, i, uint64(m.StoreGroups.Size()))
		n7, err := m.StoreGroups.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *StoreWebsites) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreWebsites) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEntitiesGen(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintEntitiesGen(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Store) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StoreID != 0 {
		n += 1 + sovEntitiesGen(uint64(m.StoreID))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovEntitiesGen(uint64(l))
	}
	if m.WebsiteID != 0 {
		n += 1 + sovEntitiesGen(uint64(m.WebsiteID))
	}
	if m.GroupID != 0 {
		n += 1 + sovEntitiesGen(uint64(m.GroupID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntitiesGen(uint64(l))
	}
	if m.SortOrder != 0 {
		n += 1 + sovEntitiesGen(uint64(m.SortOrder))
	}
	if m.IsActive {
		n += 2
	}
	if m.StoreGroup != nil {
		l = m.StoreGroup.Size()
		n += 1 + l + sovEntitiesGen(uint64(l))
	}
	if m.StoreWebsite != nil {
		l = m.StoreWebsite.Size()
		n += 1 + l + sovEntitiesGen(uint64(l))
	}
	return n
}

func (m *Stores) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovEntitiesGen(uint64(l))
		}
	}
	return n
}

func (m *StoreGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupID != 0 {
		n += 1 + sovEntitiesGen(uint64(m.GroupID))
	}
	if m.WebsiteID != 0 {
		n += 1 + sovEntitiesGen(uint64(m.WebsiteID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntitiesGen(uint64(l))
	}
	if m.RootCategoryID != 0 {
		n += 1 + sovEntitiesGen(uint64(m.RootCategoryID))
	}
	if m.DefaultStoreID != 0 {
		n += 1 + sovEntitiesGen(uint64(m.DefaultStoreID))
	}
	l = m.Code.Size()
	n += 1 + l + sovEntitiesGen(uint64(l))
	if m.StoreWebsite != nil {
		l = m.StoreWebsite.Size()
		n += 1 + l + sovEntitiesGen(uint64(l))
	}
	return n
}

func (m *StoreGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovEntitiesGen(uint64(l))
		}
	}
	return n
}

func (m *StoreWebsite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WebsiteID != 0 {
		n += 1 + sovEntitiesGen(uint64(m.WebsiteID))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovEntitiesGen(uint64(l))
	}
	l = m.Name.Size()
	n += 1 + l + sovEntitiesGen(uint64(l))
	if m.SortOrder != 0 {
		n += 1 + sovEntitiesGen(uint64(m.SortOrder))
	}
	if m.DefaultGroupID != 0 {
		n += 1 + sovEntitiesGen(uint64(m.DefaultGroupID))
	}
	if m.IsDefault {
		n += 2
	}
	if m.Stores != nil {
		l = m.Stores.Size()
		n += 1 + l + sovEntitiesGen(uint64(l))
	}
	if m.StoreGroups != nil {
		l = m.StoreGroups.Size()
		n += 1 + l + sovEntitiesGen(uint64(l))
	}
	return n
}

func (m *StoreWebsites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovEntitiesGen(uint64(l))
		}
	}
	return n
}

func sovEntitiesGen(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEntitiesGen(x uint64) (n int) {
	return sovEntitiesGen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Store) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntitiesGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Store: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Store: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteID", wireType)
			}
			m.WebsiteID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WebsiteID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortOrder", wireType)
			}
			m.SortOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortOrder |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoreGroup == nil {
				m.StoreGroup = &StoreGroup{}
			}
			if err := m.StoreGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreWebsite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoreWebsite == nil {
				m.StoreWebsite = &StoreWebsite{}
			}
			if err := m.StoreWebsite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntitiesGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stores) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntitiesGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stores: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stores: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Store{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntitiesGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntitiesGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteID", wireType)
			}
			m.WebsiteID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WebsiteID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootCategoryID", wireType)
			}
			m.RootCategoryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RootCategoryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStoreID", wireType)
			}
			m.DefaultStoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultStoreID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Code.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreWebsite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoreWebsite == nil {
				m.StoreWebsite = &StoreWebsite{}
			}
			if err := m.StoreWebsite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntitiesGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntitiesGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &StoreGroup{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntitiesGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreWebsite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntitiesGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreWebsite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreWebsite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteID", wireType)
			}
			m.WebsiteID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WebsiteID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortOrder", wireType)
			}
			m.SortOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortOrder |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGroupID", wireType)
			}
			m.DefaultGroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultGroupID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stores == nil {
				m.Stores = &Stores{}
			}
			if err := m.Stores.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoreGroups == nil {
				m.StoreGroups = &StoreGroups{}
			}
			if err := m.StoreGroups.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntitiesGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreWebsites) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntitiesGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreWebsites: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreWebsites: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &StoreWebsite{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntitiesGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntitiesGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntitiesGen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntitiesGen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntitiesGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEntitiesGen
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEntitiesGen
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEntitiesGen(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEntitiesGen = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntitiesGen   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("entities_gen.proto", fileDescriptor_entities_gen_2e5cb26d38efad33) }

var fileDescriptor_entities_gen_2e5cb26d38efad33 = []byte{
	// 521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0xaa, 0xd3, 0x40,
	0x14, 0xc6, 0x33, 0xb9, 0xe9, 0xbf, 0x69, 0x2b, 0x38, 0x6e, 0x86, 0x22, 0x31, 0x54, 0x6e, 0x0d,
	0x82, 0x09, 0x56, 0x41, 0xb7, 0xde, 0x5b, 0x90, 0x6e, 0x14, 0xa6, 0x0b, 0xc1, 0x8d, 0xa4, 0xbd,
	0x73, 0x63, 0xb0, 0xb7, 0x53, 0x32, 0x13, 0xc1, 0x47, 0x70, 0xe7, 0xd2, 0x37, 0x10, 0x77, 0x3e,
	0x46, 0x97, 0x3e, 0x81, 0x68, 0xfb, 0x22, 0x92, 0x93, 0xa4, 0x99, 0x69, 0x2b, 0xb8, 0x29, 0xe7,
	0x9c, 0xf9, 0xce, 0xd7, 0x99, 0xdf, 0x39, 0x04, 0x13, 0xbe, 0x52, 0x89, 0x4a, 0xb8, 0x7c, 0x17,
	0xf3, 0x55, 0xb0, 0x4e, 0x85, 0x12, 0xa4, 0x21, 0x95, 0x48, 0xf9, 0xe0, 0x51, 0x9c, 0xa8, 0xf7,
	0xd9, 0x3c, 0x58, 0x88, 0x9b, 0x30, 0x16, 0xb1, 0x08, 0xe1, 0x74, 0x9e, 0x5d, 0x43, 0x06, 0x09,
	0x44, 0x45, 0xd7, 0x60, 0xac, 0xc9, 0x17, 0x22, 0xe5, 0x60, 0x92, 0x88, 0x70, 0xfd, 0x21, 0x0e,
	0xf3, 0x38, 0x8a, 0x79, 0xb8, 0xca, 0x96, 0x4b, 0xf8, 0x29, 0x7a, 0x86, 0xdf, 0x6c, 0xdc, 0x98,
	0xe5, 0x3a, 0x42, 0x71, 0x0b, 0x82, 0xe9, 0x84, 0x22, 0x0f, 0xf9, 0x7d, 0x56, 0xa5, 0x84, 0x60,
	0xe7, 0x52, 0x5c, 0x71, 0x6a, 0x7b, 0xc8, 0xef, 0x30, 0x88, 0xc9, 0x5d, 0xdc, 0x79, 0xc3, 0xe7,
	0x32, 0x51, 0xb9, 0xfe, 0x0c, 0xf4, 0x75, 0x21, 0xf7, 0x7a, 0x99, 0x8a, 0x6c, 0x3d, 0x9d, 0x50,
	0xa7, 0xf0, 0x2a, 0xd3, 0xdc, 0xeb, 0x55, 0x74, 0xc3, 0x69, 0xa3, 0xf0, 0xca, 0xe3, 0xdc, 0x6b,
	0x26, 0x52, 0xf5, 0x3a, 0xbd, 0xe2, 0x29, 0x6d, 0x16, 0x5e, 0xfb, 0x02, 0x19, 0xe0, 0xf6, 0x54,
	0xbe, 0x58, 0xa8, 0xe4, 0x23, 0xa7, 0x2d, 0x0f, 0xf9, 0x6d, 0xb6, 0xcf, 0xc9, 0x63, 0x8c, 0xe1,
	0x92, 0xe0, 0x4e, 0xdb, 0x1e, 0xf2, 0xbb, 0xe3, 0xdb, 0x01, 0xbc, 0x3b, 0xa8, 0x0f, 0x98, 0x26,
	0x22, 0xcf, 0x70, 0x0f, 0xb2, 0xf2, 0xb2, 0xb4, 0x03, 0x4d, 0x77, 0xf4, 0xa6, 0xf2, 0x88, 0x19,
	0xc2, 0xe1, 0x43, 0xdc, 0x84, 0x5c, 0x12, 0x0f, 0x3b, 0x93, 0x48, 0x45, 0x14, 0x79, 0x67, 0x7e,
	0x77, 0xdc, 0xd3, 0x5b, 0x19, 0x9c, 0x0c, 0x3f, 0xdb, 0xfa, 0xc5, 0x74, 0x1c, 0xc8, 0xc4, 0x61,
	0x60, 0xb4, 0x0f, 0x31, 0x56, 0xb0, 0xce, 0x34, 0x58, 0x23, 0x7c, 0x8b, 0x09, 0xa1, 0x2e, 0x23,
	0xc5, 0x63, 0x91, 0x7e, 0xda, 0x13, 0x3e, 0xa8, 0xe6, 0xba, 0x09, 0xbf, 0x8e, 0xb2, 0xa5, 0xaa,
	0xa6, 0xda, 0x28, 0x74, 0x66, 0x95, 0x8c, 0xca, 0xe1, 0x36, 0x81, 0x43, 0x2f, 0x80, 0xdd, 0x98,
	0xa9, 0x34, 0x59, 0xc5, 0x17, 0xce, 0xe6, 0xd7, 0x3d, 0xab, 0x1c, 0xf8, 0x21, 0xb7, 0xd6, 0xff,
	0x72, 0x7b, 0x8a, 0xbb, 0x35, 0x0a, 0x49, 0xce, 0x0d, 0x78, 0x27, 0x86, 0x55, 0x10, 0xfc, 0x6e,
	0x9b, 0xff, 0x67, 0x92, 0x42, 0x27, 0x48, 0x1d, 0xad, 0xe8, 0x48, 0xa3, 0xf7, 0x8f, 0x97, 0x1d,
	0xaf, 0x9f, 0x73, 0xb8, 0x7e, 0x35, 0xc7, 0x6a, 0x84, 0x26, 0x47, 0x6d, 0x92, 0x53, 0x59, 0xd6,
	0x00, 0x66, 0x9b, 0xd5, 0x05, 0x72, 0x5e, 0x2d, 0x4f, 0xc9, 0xad, 0xaf, 0xbf, 0x5b, 0xb2, 0x6a,
	0xb3, 0x4c, 0x56, 0xe5, 0x42, 0x93, 0x23, 0x46, 0x92, 0xe9, 0xb2, 0xe1, 0x73, 0xdc, 0xd7, 0x51,
	0x49, 0xf2, 0xc0, 0x60, 0x7c, 0x72, 0x46, 0x20, 0xb8, 0xb8, 0xbf, 0xf9, 0xe3, 0x5a, 0x9b, 0xad,
	0x8b, 0x7e, 0x6e, 0x5d, 0xf4, 0x7b, 0xeb, 0xa2, 0x2f, 0x3b, 0xd7, 0xfa, 0xba, 0x73, 0xad, 0x1f,
	0x3b, 0xd7, 0x7a, 0x5b, 0x7c, 0x85, 0xe6, 0x4d, 0xf8, 0x52, 0x3c, 0xf9, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x71, 0x83, 0x35, 0xa8, 0xa9, 0x04, 0x00, 0x00,
}
