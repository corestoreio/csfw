// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package jwtclaim

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9831dad9DecodeGithubComCorestoreioPkgUtilCsjwtJwtclaim(in *jlexer.Lexer, out *Store) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "store":
			out.Store = string(in.String())
		case "userid":
			out.UserID = string(in.String())
		case "aud":
			out.Audience = string(in.String())
		case "exp":
			out.ExpiresAt = int64(in.Int64())
		case "jti":
			out.ID = string(in.String())
		case "iat":
			out.IssuedAt = int64(in.Int64())
		case "iss":
			out.Issuer = string(in.String())
		case "nbf":
			out.NotBefore = int64(in.Int64())
		case "sub":
			out.Subject = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9831dad9EncodeGithubComCorestoreioPkgUtilCsjwtJwtclaim(out *jwriter.Writer, in Store) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Store != "" {
		const prefix string = ",\"store\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Store))
	}
	if in.UserID != "" {
		const prefix string = ",\"userid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserID))
	}
	if in.Audience != "" {
		const prefix string = ",\"aud\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Audience))
	}
	if in.ExpiresAt != 0 {
		const prefix string = ",\"exp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ExpiresAt))
	}
	if in.ID != "" {
		const prefix string = ",\"jti\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.IssuedAt != 0 {
		const prefix string = ",\"iat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IssuedAt))
	}
	if in.Issuer != "" {
		const prefix string = ",\"iss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Issuer))
	}
	if in.NotBefore != 0 {
		const prefix string = ",\"nbf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NotBefore))
	}
	if in.Subject != "" {
		const prefix string = ",\"sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subject))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Store) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9831dad9EncodeGithubComCorestoreioPkgUtilCsjwtJwtclaim(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Store) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9831dad9EncodeGithubComCorestoreioPkgUtilCsjwtJwtclaim(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Store) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9831dad9DecodeGithubComCorestoreioPkgUtilCsjwtJwtclaim(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Store) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9831dad9DecodeGithubComCorestoreioPkgUtilCsjwtJwtclaim(l, v)
}
func easyjson9831dad9DecodeGithubComCorestoreioPkgUtilCsjwtJwtclaim1(in *jlexer.Lexer, out *Standard) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "aud":
			out.Audience = string(in.String())
		case "exp":
			out.ExpiresAt = int64(in.Int64())
		case "jti":
			out.ID = string(in.String())
		case "iat":
			out.IssuedAt = int64(in.Int64())
		case "iss":
			out.Issuer = string(in.String())
		case "nbf":
			out.NotBefore = int64(in.Int64())
		case "sub":
			out.Subject = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9831dad9EncodeGithubComCorestoreioPkgUtilCsjwtJwtclaim1(out *jwriter.Writer, in Standard) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Audience != "" {
		const prefix string = ",\"aud\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Audience))
	}
	if in.ExpiresAt != 0 {
		const prefix string = ",\"exp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ExpiresAt))
	}
	if in.ID != "" {
		const prefix string = ",\"jti\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.IssuedAt != 0 {
		const prefix string = ",\"iat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IssuedAt))
	}
	if in.Issuer != "" {
		const prefix string = ",\"iss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Issuer))
	}
	if in.NotBefore != 0 {
		const prefix string = ",\"nbf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NotBefore))
	}
	if in.Subject != "" {
		const prefix string = ",\"sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subject))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Standard) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9831dad9EncodeGithubComCorestoreioPkgUtilCsjwtJwtclaim1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Standard) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9831dad9EncodeGithubComCorestoreioPkgUtilCsjwtJwtclaim1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Standard) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9831dad9DecodeGithubComCorestoreioPkgUtilCsjwtJwtclaim1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Standard) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9831dad9DecodeGithubComCorestoreioPkgUtilCsjwtJwtclaim1(l, v)
}
func easyjson9831dad9DecodeGithubComCorestoreioPkgUtilCsjwtJwtclaim2(in *jlexer.Lexer, out *Map) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(Map)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 interface{}
			if m, ok := v1.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := v1.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				v1 = in.Interface()
			}
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9831dad9EncodeGithubComCorestoreioPkgUtilCsjwtJwtclaim2(out *jwriter.Writer, in Map) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if v2First {
				v2First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v2Name))
			out.RawByte(':')
			if m, ok := v2Value.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v2Value.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v2Value))
			}
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Map) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9831dad9EncodeGithubComCorestoreioPkgUtilCsjwtJwtclaim2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Map) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9831dad9EncodeGithubComCorestoreioPkgUtilCsjwtJwtclaim2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Map) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9831dad9DecodeGithubComCorestoreioPkgUtilCsjwtJwtclaim2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Map) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9831dad9DecodeGithubComCorestoreioPkgUtilCsjwtJwtclaim2(l, v)
}
func easyjson9831dad9DecodeGithubComCorestoreioPkgUtilCsjwtJwtclaim3(in *jlexer.Lexer, out *HeadSegments) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alg":
			out.Algorithm = string(in.String())
		case "typ":
			out.Type = string(in.String())
		case "jku":
			out.JKU = string(in.String())
		case "kid":
			out.KID = string(in.String())
		case "x5u":
			out.X5U = string(in.String())
		case "x5t":
			out.X5T = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9831dad9EncodeGithubComCorestoreioPkgUtilCsjwtJwtclaim3(out *jwriter.Writer, in HeadSegments) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Algorithm != "" {
		const prefix string = ",\"alg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Algorithm))
	}
	if in.Type != "" {
		const prefix string = ",\"typ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.JKU != "" {
		const prefix string = ",\"jku\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JKU))
	}
	if in.KID != "" {
		const prefix string = ",\"kid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KID))
	}
	if in.X5U != "" {
		const prefix string = ",\"x5u\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.X5U))
	}
	if in.X5T != "" {
		const prefix string = ",\"x5t\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.X5T))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HeadSegments) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9831dad9EncodeGithubComCorestoreioPkgUtilCsjwtJwtclaim3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HeadSegments) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9831dad9EncodeGithubComCorestoreioPkgUtilCsjwtJwtclaim3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HeadSegments) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9831dad9DecodeGithubComCorestoreioPkgUtilCsjwtJwtclaim3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HeadSegments) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9831dad9DecodeGithubComCorestoreioPkgUtilCsjwtJwtclaim3(l, v)
}
