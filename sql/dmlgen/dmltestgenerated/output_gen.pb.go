// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dmltestgenerated/output_gen.proto

package dmltestgenerated

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *CatalogProductIndexEAVDecimalIDX) Reset()         { *m = CatalogProductIndexEAVDecimalIDX{} }
func (m *CatalogProductIndexEAVDecimalIDX) String() string { return proto.CompactTextString(m) }
func (*CatalogProductIndexEAVDecimalIDX) ProtoMessage()    {}
func (*CatalogProductIndexEAVDecimalIDX) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{0}
}
func (m *CatalogProductIndexEAVDecimalIDX) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CatalogProductIndexEAVDecimalIDX) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CatalogProductIndexEAVDecimalIDX.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CatalogProductIndexEAVDecimalIDX) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogProductIndexEAVDecimalIDX.Merge(m, src)
}
func (m *CatalogProductIndexEAVDecimalIDX) XXX_Size() int {
	return m.Size()
}
func (m *CatalogProductIndexEAVDecimalIDX) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogProductIndexEAVDecimalIDX.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogProductIndexEAVDecimalIDX proto.InternalMessageInfo

func (m *CatalogProductIndexEAVDecimalIDXes) Reset()         { *m = CatalogProductIndexEAVDecimalIDXes{} }
func (m *CatalogProductIndexEAVDecimalIDXes) String() string { return proto.CompactTextString(m) }
func (*CatalogProductIndexEAVDecimalIDXes) ProtoMessage()    {}
func (*CatalogProductIndexEAVDecimalIDXes) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{1}
}
func (m *CatalogProductIndexEAVDecimalIDXes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CatalogProductIndexEAVDecimalIDXes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CatalogProductIndexEAVDecimalIDXes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CatalogProductIndexEAVDecimalIDXes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogProductIndexEAVDecimalIDXes.Merge(m, src)
}
func (m *CatalogProductIndexEAVDecimalIDXes) XXX_Size() int {
	return m.Size()
}
func (m *CatalogProductIndexEAVDecimalIDXes) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogProductIndexEAVDecimalIDXes.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogProductIndexEAVDecimalIDXes proto.InternalMessageInfo

func (m *CoreConfiguration) Reset()         { *m = CoreConfiguration{} }
func (m *CoreConfiguration) String() string { return proto.CompactTextString(m) }
func (*CoreConfiguration) ProtoMessage()    {}
func (*CoreConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{2}
}
func (m *CoreConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoreConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoreConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoreConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoreConfiguration.Merge(m, src)
}
func (m *CoreConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *CoreConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_CoreConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_CoreConfiguration proto.InternalMessageInfo

func (m *CoreConfigurations) Reset()         { *m = CoreConfigurations{} }
func (m *CoreConfigurations) String() string { return proto.CompactTextString(m) }
func (*CoreConfigurations) ProtoMessage()    {}
func (*CoreConfigurations) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{3}
}
func (m *CoreConfigurations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoreConfigurations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoreConfigurations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoreConfigurations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoreConfigurations.Merge(m, src)
}
func (m *CoreConfigurations) XXX_Size() int {
	return m.Size()
}
func (m *CoreConfigurations) XXX_DiscardUnknown() {
	xxx_messageInfo_CoreConfigurations.DiscardUnknown(m)
}

var xxx_messageInfo_CoreConfigurations proto.InternalMessageInfo

func (m *CustomerAddressEntity) Reset()         { *m = CustomerAddressEntity{} }
func (m *CustomerAddressEntity) String() string { return proto.CompactTextString(m) }
func (*CustomerAddressEntity) ProtoMessage()    {}
func (*CustomerAddressEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{4}
}
func (m *CustomerAddressEntity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomerAddressEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomerAddressEntity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomerAddressEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerAddressEntity.Merge(m, src)
}
func (m *CustomerAddressEntity) XXX_Size() int {
	return m.Size()
}
func (m *CustomerAddressEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerAddressEntity.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerAddressEntity proto.InternalMessageInfo

func (m *CustomerAddressEntities) Reset()         { *m = CustomerAddressEntities{} }
func (m *CustomerAddressEntities) String() string { return proto.CompactTextString(m) }
func (*CustomerAddressEntities) ProtoMessage()    {}
func (*CustomerAddressEntities) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{5}
}
func (m *CustomerAddressEntities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomerAddressEntities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomerAddressEntities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomerAddressEntities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerAddressEntities.Merge(m, src)
}
func (m *CustomerAddressEntities) XXX_Size() int {
	return m.Size()
}
func (m *CustomerAddressEntities) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerAddressEntities.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerAddressEntities proto.InternalMessageInfo

func (m *CustomerEntity) Reset()         { *m = CustomerEntity{} }
func (m *CustomerEntity) String() string { return proto.CompactTextString(m) }
func (*CustomerEntity) ProtoMessage()    {}
func (*CustomerEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{6}
}
func (m *CustomerEntity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomerEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomerEntity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomerEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerEntity.Merge(m, src)
}
func (m *CustomerEntity) XXX_Size() int {
	return m.Size()
}
func (m *CustomerEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerEntity.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerEntity proto.InternalMessageInfo

func (m *CustomerEntities) Reset()         { *m = CustomerEntities{} }
func (m *CustomerEntities) String() string { return proto.CompactTextString(m) }
func (*CustomerEntities) ProtoMessage()    {}
func (*CustomerEntities) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{7}
}
func (m *CustomerEntities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomerEntities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomerEntities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomerEntities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerEntities.Merge(m, src)
}
func (m *CustomerEntities) XXX_Size() int {
	return m.Size()
}
func (m *CustomerEntities) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerEntities.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerEntities proto.InternalMessageInfo

func (m *DmlgenTypes) Reset()         { *m = DmlgenTypes{} }
func (m *DmlgenTypes) String() string { return proto.CompactTextString(m) }
func (*DmlgenTypes) ProtoMessage()    {}
func (*DmlgenTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{8}
}
func (m *DmlgenTypes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DmlgenTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DmlgenTypes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DmlgenTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DmlgenTypes.Merge(m, src)
}
func (m *DmlgenTypes) XXX_Size() int {
	return m.Size()
}
func (m *DmlgenTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_DmlgenTypes.DiscardUnknown(m)
}

var xxx_messageInfo_DmlgenTypes proto.InternalMessageInfo

func (m *DmlgenTypesCollection) Reset()         { *m = DmlgenTypesCollection{} }
func (m *DmlgenTypesCollection) String() string { return proto.CompactTextString(m) }
func (*DmlgenTypesCollection) ProtoMessage()    {}
func (*DmlgenTypesCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{9}
}
func (m *DmlgenTypesCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DmlgenTypesCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DmlgenTypesCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DmlgenTypesCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DmlgenTypesCollection.Merge(m, src)
}
func (m *DmlgenTypesCollection) XXX_Size() int {
	return m.Size()
}
func (m *DmlgenTypesCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_DmlgenTypesCollection.DiscardUnknown(m)
}

var xxx_messageInfo_DmlgenTypesCollection proto.InternalMessageInfo

func (m *SalesOrderStatusState) Reset()         { *m = SalesOrderStatusState{} }
func (m *SalesOrderStatusState) String() string { return proto.CompactTextString(m) }
func (*SalesOrderStatusState) ProtoMessage()    {}
func (*SalesOrderStatusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{10}
}
func (m *SalesOrderStatusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SalesOrderStatusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SalesOrderStatusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SalesOrderStatusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SalesOrderStatusState.Merge(m, src)
}
func (m *SalesOrderStatusState) XXX_Size() int {
	return m.Size()
}
func (m *SalesOrderStatusState) XXX_DiscardUnknown() {
	xxx_messageInfo_SalesOrderStatusState.DiscardUnknown(m)
}

var xxx_messageInfo_SalesOrderStatusState proto.InternalMessageInfo

func (m *SalesOrderStatusStates) Reset()         { *m = SalesOrderStatusStates{} }
func (m *SalesOrderStatusStates) String() string { return proto.CompactTextString(m) }
func (*SalesOrderStatusStates) ProtoMessage()    {}
func (*SalesOrderStatusStates) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{11}
}
func (m *SalesOrderStatusStates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SalesOrderStatusStates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SalesOrderStatusStates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SalesOrderStatusStates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SalesOrderStatusStates.Merge(m, src)
}
func (m *SalesOrderStatusStates) XXX_Size() int {
	return m.Size()
}
func (m *SalesOrderStatusStates) XXX_DiscardUnknown() {
	xxx_messageInfo_SalesOrderStatusStates.DiscardUnknown(m)
}

var xxx_messageInfo_SalesOrderStatusStates proto.InternalMessageInfo

func (m *ViewCustomerAutoIncrement) Reset()         { *m = ViewCustomerAutoIncrement{} }
func (m *ViewCustomerAutoIncrement) String() string { return proto.CompactTextString(m) }
func (*ViewCustomerAutoIncrement) ProtoMessage()    {}
func (*ViewCustomerAutoIncrement) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{12}
}
func (m *ViewCustomerAutoIncrement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewCustomerAutoIncrement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewCustomerAutoIncrement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewCustomerAutoIncrement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewCustomerAutoIncrement.Merge(m, src)
}
func (m *ViewCustomerAutoIncrement) XXX_Size() int {
	return m.Size()
}
func (m *ViewCustomerAutoIncrement) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewCustomerAutoIncrement.DiscardUnknown(m)
}

var xxx_messageInfo_ViewCustomerAutoIncrement proto.InternalMessageInfo

func (m *ViewCustomerAutoIncrements) Reset()         { *m = ViewCustomerAutoIncrements{} }
func (m *ViewCustomerAutoIncrements) String() string { return proto.CompactTextString(m) }
func (*ViewCustomerAutoIncrements) ProtoMessage()    {}
func (*ViewCustomerAutoIncrements) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{13}
}
func (m *ViewCustomerAutoIncrements) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewCustomerAutoIncrements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewCustomerAutoIncrements.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewCustomerAutoIncrements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewCustomerAutoIncrements.Merge(m, src)
}
func (m *ViewCustomerAutoIncrements) XXX_Size() int {
	return m.Size()
}
func (m *ViewCustomerAutoIncrements) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewCustomerAutoIncrements.DiscardUnknown(m)
}

var xxx_messageInfo_ViewCustomerAutoIncrements proto.InternalMessageInfo

func (m *ViewCustomerNoAutoIncrement) Reset()         { *m = ViewCustomerNoAutoIncrement{} }
func (m *ViewCustomerNoAutoIncrement) String() string { return proto.CompactTextString(m) }
func (*ViewCustomerNoAutoIncrement) ProtoMessage()    {}
func (*ViewCustomerNoAutoIncrement) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{14}
}
func (m *ViewCustomerNoAutoIncrement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewCustomerNoAutoIncrement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewCustomerNoAutoIncrement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewCustomerNoAutoIncrement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewCustomerNoAutoIncrement.Merge(m, src)
}
func (m *ViewCustomerNoAutoIncrement) XXX_Size() int {
	return m.Size()
}
func (m *ViewCustomerNoAutoIncrement) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewCustomerNoAutoIncrement.DiscardUnknown(m)
}

var xxx_messageInfo_ViewCustomerNoAutoIncrement proto.InternalMessageInfo

func (m *ViewCustomerNoAutoIncrements) Reset()         { *m = ViewCustomerNoAutoIncrements{} }
func (m *ViewCustomerNoAutoIncrements) String() string { return proto.CompactTextString(m) }
func (*ViewCustomerNoAutoIncrements) ProtoMessage()    {}
func (*ViewCustomerNoAutoIncrements) Descriptor() ([]byte, []int) {
	return fileDescriptor_17266d895bbb7157, []int{15}
}
func (m *ViewCustomerNoAutoIncrements) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewCustomerNoAutoIncrements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewCustomerNoAutoIncrements.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewCustomerNoAutoIncrements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewCustomerNoAutoIncrements.Merge(m, src)
}
func (m *ViewCustomerNoAutoIncrements) XXX_Size() int {
	return m.Size()
}
func (m *ViewCustomerNoAutoIncrements) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewCustomerNoAutoIncrements.DiscardUnknown(m)
}

var xxx_messageInfo_ViewCustomerNoAutoIncrements proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CatalogProductIndexEAVDecimalIDX)(nil), "dmltestgenerated.CatalogProductIndexEAVDecimalIDX")
	proto.RegisterType((*CatalogProductIndexEAVDecimalIDXes)(nil), "dmltestgenerated.CatalogProductIndexEAVDecimalIDXes")
	proto.RegisterType((*CoreConfiguration)(nil), "dmltestgenerated.CoreConfiguration")
	proto.RegisterType((*CoreConfigurations)(nil), "dmltestgenerated.CoreConfigurations")
	proto.RegisterType((*CustomerAddressEntity)(nil), "dmltestgenerated.CustomerAddressEntity")
	proto.RegisterType((*CustomerAddressEntities)(nil), "dmltestgenerated.CustomerAddressEntities")
	proto.RegisterType((*CustomerEntity)(nil), "dmltestgenerated.CustomerEntity")
	proto.RegisterType((*CustomerEntities)(nil), "dmltestgenerated.CustomerEntities")
	proto.RegisterType((*DmlgenTypes)(nil), "dmltestgenerated.DmlgenTypes")
	proto.RegisterType((*DmlgenTypesCollection)(nil), "dmltestgenerated.DmlgenTypesCollection")
	proto.RegisterType((*SalesOrderStatusState)(nil), "dmltestgenerated.SalesOrderStatusState")
	proto.RegisterType((*SalesOrderStatusStates)(nil), "dmltestgenerated.SalesOrderStatusStates")
	proto.RegisterType((*ViewCustomerAutoIncrement)(nil), "dmltestgenerated.ViewCustomerAutoIncrement")
	proto.RegisterType((*ViewCustomerAutoIncrements)(nil), "dmltestgenerated.ViewCustomerAutoIncrements")
	proto.RegisterType((*ViewCustomerNoAutoIncrement)(nil), "dmltestgenerated.ViewCustomerNoAutoIncrement")
	proto.RegisterType((*ViewCustomerNoAutoIncrements)(nil), "dmltestgenerated.ViewCustomerNoAutoIncrements")
}

func init() { proto.RegisterFile("dmltestgenerated/output_gen.proto", fileDescriptor_17266d895bbb7157) }

var fileDescriptor_17266d895bbb7157 = []byte{
	// 1962 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xdd, 0x72, 0x1b, 0xb7,
	0x15, 0x36, 0x25, 0x51, 0x12, 0x41, 0x49, 0x96, 0x11, 0x5b, 0x81, 0x15, 0x47, 0x56, 0x18, 0x37,
	0x91, 0x1d, 0x47, 0x12, 0x97, 0x8c, 0xfa, 0x93, 0xcc, 0x34, 0x12, 0x69, 0xc5, 0x9b, 0xb1, 0x13,
	0xcd, 0x52, 0x66, 0x3b, 0x9d, 0xe9, 0x74, 0x96, 0x24, 0xb4, 0xc2, 0x78, 0xb9, 0x60, 0x77, 0xb1,
	0xa9, 0x74, 0xd9, 0xeb, 0xde, 0xe4, 0xa6, 0xf7, 0x7d, 0x84, 0xce, 0xf4, 0x09, 0x7a, 0xe7, 0xcb,
	0xf6, 0x01, 0xfa, 0x67, 0xbf, 0x48, 0x07, 0x67, 0xb1, 0x3f, 0x58, 0xed, 0x92, 0x72, 0x9b, 0x1b,
	0x0d, 0xce, 0xc1, 0xf7, 0x1d, 0x00, 0x07, 0x87, 0x1f, 0x80, 0x15, 0xfa, 0x60, 0x34, 0x76, 0x05,
	0x0d, 0x84, 0x43, 0x3d, 0xea, 0xdb, 0x82, 0x8e, 0xf6, 0x78, 0x28, 0x26, 0xa1, 0xf8, 0x8d, 0x43,
	0xbd, 0xdd, 0x89, 0xcf, 0x05, 0xc7, 0xeb, 0x79, 0xc8, 0xe6, 0xa7, 0x0e, 0x13, 0xe7, 0xe1, 0x60,
	0x77, 0xc8, 0xc7, 0x7b, 0x0e, 0x77, 0xf8, 0x1e, 0x00, 0x07, 0xe1, 0x19, 0x58, 0x60, 0x40, 0x2b,
	0x0a, 0xb0, 0x79, 0xdf, 0xe1, 0xdc, 0x71, 0x69, 0x8a, 0x12, 0x6c, 0x4c, 0x03, 0x61, 0x8f, 0x27,
	0x0a, 0x60, 0x64, 0xe2, 0x0d, 0xb9, 0x4f, 0x03, 0xc1, 0x7d, 0xca, 0xf8, 0xde, 0xe4, 0xa5, 0xb3,
	0x27, 0xdb, 0xb6, 0x43, 0xf7, 0xbc, 0xd0, 0x75, 0xe1, 0x4f, 0xc4, 0x69, 0xfc, 0xb5, 0x82, 0xb6,
	0x3b, 0xb6, 0xb0, 0x5d, 0xee, 0x9c, 0xf8, 0x7c, 0x14, 0x0e, 0x85, 0xe9, 0x8d, 0xe8, 0xc5, 0x93,
	0xc3, 0x7e, 0x97, 0x0e, 0xd9, 0xd8, 0x76, 0xcd, 0xee, 0x2f, 0xf1, 0x26, 0x5a, 0x7e, 0xe2, 0x09,
	0x26, 0x2e, 0xcd, 0x2e, 0xa9, 0x6c, 0x57, 0x76, 0x56, 0xad, 0xc4, 0xc6, 0xdb, 0xa8, 0x7e, 0x28,
	0x84, 0xcf, 0x06, 0xa1, 0xa0, 0x66, 0x97, 0xcc, 0x41, 0x77, 0xd6, 0x85, 0x09, 0x5a, 0xea, 0xc9,
	0x99, 0x98, 0x5d, 0x32, 0x0f, 0xbd, 0xb1, 0x89, 0x1f, 0xa2, 0x6a, 0xdf, 0x76, 0x43, 0x4a, 0x16,
	0xb6, 0x2b, 0x3b, 0x75, 0x63, 0x75, 0x17, 0x26, 0xa6, 0x06, 0x3e, 0x5a, 0x78, 0xf5, 0xcf, 0xfb,
	0x37, 0xac, 0x08, 0x21, 0xa7, 0xd0, 0xe3, 0xa1, 0x3f, 0x94, 0x51, 0xaa, 0xd1, 0x14, 0x62, 0xbb,
	0xe1, 0xa2, 0xc6, 0xac, 0x25, 0xd0, 0x00, 0x1f, 0xa3, 0x85, 0xae, 0x2d, 0x6c, 0x52, 0xd9, 0x9e,
	0xdf, 0xa9, 0x1b, 0xc6, 0x6e, 0x7e, 0x3b, 0x76, 0x67, 0xc5, 0xb0, 0x80, 0xdf, 0xf8, 0xfb, 0x1c,
	0xba, 0xd5, 0xe1, 0x3e, 0xed, 0x70, 0xef, 0x8c, 0x39, 0xa1, 0x6f, 0x0b, 0xc6, 0x3d, 0x39, 0xbf,
	0xc8, 0x91, 0xa6, 0x28, 0xb6, 0xf1, 0x6d, 0x54, 0xed, 0x0d, 0xf9, 0x84, 0x42, 0x72, 0x6a, 0x56,
	0x64, 0x40, 0x5a, 0x64, 0x43, 0xa5, 0xa5, 0x6a, 0xc5, 0x26, 0x7e, 0x84, 0x96, 0x9e, 0x5c, 0x4c,
	0x98, 0x4f, 0x03, 0x95, 0x18, 0x14, 0x25, 0xe6, 0x94, 0x8d, 0xa9, 0xca, 0x4a, 0x0c, 0xc0, 0x18,
	0x2d, 0x9c, 0xd8, 0xe2, 0x1c, 0x72, 0x52, 0xb3, 0xa0, 0x8d, 0x77, 0xe2, 0xb4, 0x2e, 0x02, 0x7b,
	0x25, 0x62, 0xf7, 0x84, 0xcf, 0x3c, 0x47, 0xcf, 0xea, 0x11, 0xaa, 0xf5, 0xa9, 0x1f, 0x30, 0xee,
	0x9d, 0x06, 0x64, 0x09, 0xd0, 0x9b, 0xbb, 0x51, 0x99, 0xed, 0xc6, 0x65, 0x06, 0xc3, 0x42, 0x99,
	0x1d, 0x2d, 0x4b, 0xee, 0xf7, 0xff, 0xba, 0x5f, 0xb1, 0x52, 0x5a, 0x36, 0x06, 0x25, 0xcb, 0xff,
	0x4b, 0x0c, 0xda, 0x78, 0x8e, 0xf0, 0x95, 0x94, 0x06, 0xf8, 0xc7, 0xda, 0x8e, 0x7d, 0x58, 0xb0,
	0x63, 0x79, 0x8e, 0xda, 0xa2, 0x7f, 0x2c, 0xa3, 0x3b, 0x9d, 0x30, 0x10, 0x7c, 0x4c, 0xfd, 0xc3,
	0xd1, 0xc8, 0xa7, 0x41, 0x10, 0xd5, 0xeb, 0xd4, 0x4a, 0x6e, 0xa3, 0xba, 0xe9, 0x0d, 0x7d, 0x3a,
	0xa6, 0x9e, 0x50, 0x95, 0x5c, 0x9c, 0xbc, 0x2c, 0x0c, 0xef, 0xa2, 0xe5, 0x13, 0xdb, 0x8f, 0x28,
	0xf3, 0x59, 0xca, 0x0b, 0xe6, 0x89, 0x96, 0xa1, 0x28, 0x09, 0x46, 0xa6, 0xab, 0xe3, 0x53, 0x39,
	0xfd, 0x43, 0xa1, 0xb6, 0xf7, 0x9a, 0xe9, 0x4a, 0x68, 0x32, 0xc6, 0x8b, 0xc9, 0x48, 0xc5, 0xa8,
	0xbe, 0x4d, 0x8c, 0x84, 0x26, 0x33, 0x61, 0x06, 0x87, 0x43, 0xc1, 0xbe, 0x8b, 0xea, 0x64, 0xd9,
	0x4a, 0x6c, 0x59, 0x54, 0x1d, 0x26, 0x2e, 0xa1, 0x22, 0x6a, 0x16, 0xb4, 0xf1, 0x63, 0xb4, 0xd4,
	0xe1, 0xe3, 0x89, 0xed, 0x5d, 0xaa, 0x4d, 0x2e, 0xca, 0x4c, 0x0c, 0xc1, 0xf7, 0x50, 0xad, 0xc3,
	0x43, 0x4f, 0xf8, 0x32, 0xd1, 0x35, 0x08, 0x93, 0x3a, 0xf0, 0x03, 0x34, 0x7f, 0x6c, 0x5f, 0x10,
	0x54, 0x1a, 0x47, 0x76, 0xcb, 0x18, 0xc7, 0xcc, 0x0f, 0x84, 0x67, 0x8f, 0x29, 0xa9, 0x47, 0x31,
	0x12, 0x87, 0x9c, 0xff, 0x33, 0x5b, 0x75, 0xae, 0x40, 0x67, 0x62, 0x63, 0x03, 0xa1, 0xe7, 0x6c,
	0x34, 0x72, 0x29, 0xf4, 0xae, 0x96, 0x0e, 0x93, 0x41, 0xc1, 0x3e, 0xf2, 0x40, 0x0c, 0xf9, 0x88,
	0x92, 0xb5, 0x52, 0x46, 0x82, 0xc1, 0x8f, 0xd0, 0xe2, 0x89, 0x4f, 0xcf, 0xd8, 0x05, 0xb9, 0x59,
	0x8a, 0x56, 0x08, 0x89, 0xb5, 0xa8, 0xc3, 0xb8, 0x47, 0xd6, 0xcb, 0xb1, 0x11, 0x42, 0xce, 0x23,
	0x6a, 0x99, 0x5d, 0x72, 0xab, 0xbc, 0x9e, 0x62, 0x0c, 0xde, 0x40, 0x8b, 0x3d, 0xe1, 0x53, 0x2a,
	0x08, 0x86, 0x2c, 0x28, 0x4b, 0x8e, 0xd9, 0x0b, 0xcf, 0xe4, 0xfc, 0xde, 0x29, 0x1f, 0x33, 0x42,
	0xc8, 0x4c, 0x9f, 0x52, 0x97, 0x4e, 0xce, 0xb9, 0x47, 0xc9, 0xed, 0x28, 0xd3, 0x89, 0x23, 0x92,
	0x13, 0x59, 0xde, 0x77, 0xa6, 0xc9, 0x89, 0xac, 0xed, 0x7d, 0x84, 0x64, 0x23, 0xe8, 0xdb, 0x2e,
	0x1b, 0x91, 0x8d, 0xac, 0x76, 0x1d, 0x71, 0x1e, 0x2b, 0x7a, 0x06, 0x83, 0x7f, 0x86, 0xd6, 0xfa,
	0xb6, 0xb0, 0xe8, 0x6f, 0x43, 0x1a, 0x88, 0xae, 0x2d, 0x28, 0x79, 0xb7, 0x74, 0x90, 0x1c, 0x12,
	0x1f, 0xa0, 0x95, 0xd4, 0x63, 0x76, 0x09, 0x29, 0x65, 0x6a, 0x38, 0xfc, 0x25, 0xba, 0x95, 0xda,
	0xbd, 0x70, 0x38, 0xa4, 0x41, 0x40, 0xee, 0x96, 0xa6, 0xfa, 0x2a, 0xb8, 0xd1, 0x47, 0xef, 0x16,
	0xc9, 0x0b, 0xa3, 0x01, 0xfe, 0x5c, 0xd3, 0xac, 0x8f, 0x0b, 0x34, 0xab, 0x48, 0x97, 0x94, 0x6e,
	0xfd, 0xa9, 0x8e, 0xd6, 0xe2, 0xfe, 0x6b, 0x08, 0xd6, 0x3e, 0xaa, 0xfd, 0x82, 0x0e, 0x02, 0x96,
	0x1c, 0xbc, 0xc5, 0x0b, 0x48, 0x41, 0x72, 0x2b, 0x9f, 0x8c, 0x6d, 0xe6, 0xea, 0x4a, 0xa5, 0x6f,
	0x25, 0x00, 0xe4, 0xe9, 0xf4, 0x95, 0xcf, 0xc3, 0x89, 0xd9, 0x05, 0x91, 0x5a, 0xb5, 0x62, 0x33,
	0x2f, 0x93, 0xd5, 0xeb, 0xc9, 0xe4, 0xe3, 0xf4, 0x12, 0xb0, 0x58, 0x3a, 0xd3, 0xe4, 0x62, 0xa0,
	0x89, 0xe4, 0xd2, 0x0f, 0x20, 0x92, 0xcb, 0xff, 0xbf, 0x48, 0xd6, 0x72, 0x22, 0x79, 0x80, 0x36,
	0xba, 0x2c, 0xb0, 0x07, 0x2e, 0x3d, 0x0c, 0x05, 0x87, 0xec, 0x74, 0xce, 0x6d, 0xcf, 0xa1, 0xa0,
	0x6b, 0xab, 0x56, 0x49, 0xaf, 0xdc, 0x35, 0x35, 0x49, 0xd3, 0x03, 0x59, 0x2b, 0xce, 0x5e, 0x0a,
	0xca, 0x48, 0xcd, 0xca, 0x4c, 0xa9, 0xd9, 0xcf, 0x8a, 0x66, 0xb9, 0xf2, 0x65, 0x84, 0x54, 0x17,
	0xcb, 0xb5, 0xeb, 0x8a, 0x65, 0x22, 0xbe, 0xe5, 0xf2, 0x97, 0x0a, 0x72, 0x2a, 0x46, 0xeb, 0x33,
	0xc5, 0xa8, 0x81, 0xe6, 0xbb, 0x7c, 0xa0, 0xb4, 0xef, 0xea, 0xcd, 0x47, 0x76, 0xca, 0x6a, 0xb2,
	0x26, 0xa7, 0xfc, 0x25, 0xf5, 0xa6, 0xa8, 0x5b, 0x0c, 0xc1, 0x5f, 0xa0, 0x75, 0xd5, 0x4c, 0x8b,
	0xea, 0x76, 0x49, 0xf8, 0x2b, 0x48, 0x29, 0x51, 0x5d, 0x7a, 0x66, 0x87, 0xae, 0x38, 0x62, 0xae,
	0xcb, 0x3c, 0x47, 0xd7, 0x41, 0xad, 0x80, 0x73, 0x48, 0xfc, 0x05, 0xba, 0xa9, 0x3c, 0xbd, 0x73,
	0x36, 0x99, 0x48, 0xf2, 0x46, 0x29, 0x39, 0x0f, 0x95, 0x59, 0x3b, 0xb5, 0x2f, 0xbe, 0xb3, 0xc5,
	0x14, 0x51, 0x54, 0x08, 0x29, 0x86, 0x70, 0x13, 0xf2, 0xc7, 0x70, 0x11, 0x9a, 0x26, 0x86, 0x59,
	0x9c, 0x1c, 0xe3, 0x2b, 0xea, 0x8d, 0xa8, 0x3f, 0x45, 0x01, 0x15, 0x02, 0xb7, 0x50, 0xfd, 0xd8,
	0x66, 0x6e, 0xe8, 0xd3, 0xe0, 0x9b, 0x70, 0x4c, 0x36, 0x81, 0x50, 0x8f, 0x08, 0x66, 0x06, 0x9f,
	0x45, 0xe1, 0x36, 0x5a, 0x81, 0x5a, 0x53, 0x3e, 0xf2, 0x5e, 0x49, 0xe2, 0x35, 0x14, 0x36, 0x50,
	0xfd, 0x19, 0x1f, 0xbe, 0x8c, 0xaf, 0xc1, 0xf7, 0x4a, 0x48, 0x59, 0x10, 0x1e, 0x96, 0xaa, 0x32,
	0x79, 0x1f, 0xf8, 0x0f, 0xaf, 0xa7, 0xc6, 0x8c, 0x06, 0x56, 0x59, 0xa4, 0xc6, 0x53, 0xb4, 0xae,
	0x29, 0xb4, 0xd4, 0xfc, 0xb6, 0xa6, 0xf9, 0xdb, 0xe5, 0xa3, 0x68, 0x62, 0xff, 0xfb, 0x9b, 0xa8,
	0xde, 0x1d, 0xbb, 0x0e, 0xf5, 0x4e, 0x2f, 0x27, 0x34, 0xc0, 0x6b, 0x68, 0x4e, 0x69, 0x7c, 0xd5,
	0x9a, 0x33, 0xbb, 0xb8, 0x89, 0x50, 0x87, 0xbb, 0x47, 0xcc, 0x61, 0x9e, 0x68, 0x2a, 0x79, 0x4f,
	0x93, 0x7d, 0xd0, 0x8e, 0x7f, 0x96, 0x29, 0x08, 0x6f, 0x65, 0x28, 0x06, 0x68, 0xfc, 0x7c, 0xa6,
	0xdf, 0x90, 0x3f, 0xf5, 0xc4, 0x6a, 0xa9, 0xcb, 0x67, 0x66, 0xc3, 0x0b, 0x62, 0xb6, 0xb4, 0x98,
	0x6d, 0x50, 0xfb, 0x85, 0x4c, 0x7f, 0x5b, 0x1e, 0x14, 0xd2, 0x72, 0xf9, 0x00, 0x84, 0x7d, 0xc5,
	0x8a, 0x4d, 0xfc, 0x58, 0x3e, 0x89, 0x5c, 0x79, 0x54, 0x37, 0x95, 0x86, 0x5f, 0xdd, 0xc0, 0x04,
	0x81, 0xbf, 0x4c, 0xd0, 0xc6, 0x5b, 0xa9, 0x75, 0xc2, 0x92, 0x95, 0xa6, 0xda, 0xf2, 0x61, 0xdc,
	0x04, 0xc1, 0x2e, 0xac, 0xb4, 0x2c, 0x0a, 0x3f, 0xd5, 0x58, 0x86, 0xba, 0x94, 0x5e, 0x6f, 0x6c,
	0x8d, 0x89, 0x7f, 0x8a, 0x56, 0xa5, 0x1d, 0xbd, 0x17, 0x9b, 0xfb, 0x4d, 0x25, 0xee, 0x85, 0xaf,
	0x5a, 0x1d, 0x99, 0xa3, 0x1a, 0x6d, 0x25, 0xf4, 0x33, 0xa9, 0x46, 0x1b, 0x37, 0x51, 0xed, 0xc4,
	0x67, 0x43, 0x7a, 0x28, 0x69, 0xab, 0xe5, 0xb4, 0x14, 0x95, 0x50, 0x8e, 0x24, 0x65, 0x6d, 0x16,
	0x45, 0xa2, 0xf2, 0x13, 0x6c, 0x29, 0xd5, 0x9f, 0x3d, 0xc1, 0x96, 0x4e, 0x35, 0xf6, 0x0f, 0xd4,
	0x11, 0x30, 0x8b, 0x6a, 0xec, 0x1f, 0xe0, 0xcf, 0xd1, 0x5a, 0xc6, 0xd1, 0x6e, 0x1a, 0xea, 0x54,
	0x28, 0xe4, 0xe6, 0xa0, 0xf8, 0x13, 0x28, 0x4c, 0x53, 0xfe, 0x78, 0x70, 0x99, 0x52, 0xc5, 0x08,
	0x55, 0xc5, 0xa6, 0xfc, 0xd9, 0xbc, 0x13, 0x3d, 0xc6, 0x95, 0x19, 0xbd, 0x7b, 0x64, 0xb3, 0xa5,
	0xce, 0x8c, 0xc2, 0x8b, 0x8b, 0x82, 0xa4, 0x71, 0xda, 0x70, 0x4a, 0xac, 0xc6, 0x3d, 0xed, 0x48,
	0xa0, 0xdd, 0x67, 0xdc, 0x73, 0x04, 0xbd, 0x10, 0x4d, 0xfd, 0x1c, 0xc8, 0x0b, 0x74, 0x8a, 0xc3,
	0x0d, 0x8d, 0x67, 0xc0, 0x51, 0x50, 0xd3, 0x30, 0x06, 0x7e, 0x00, 0x29, 0x7e, 0x4e, 0x47, 0x2c,
	0x1c, 0x0f, 0xe4, 0x2f, 0x91, 0xc0, 0x2f, 0x51, 0x77, 0xca, 0x83, 0x2c, 0x71, 0x44, 0x73, 0xb8,
	0x5b, 0x7e, 0xd7, 0xd6, 0x91, 0xf8, 0xa3, 0x1c, 0xd7, 0x00, 0xf5, 0xaf, 0xe5, 0x70, 0x06, 0xfe,
	0x0c, 0x66, 0xdb, 0x1b, 0xdb, 0xf2, 0xfc, 0x13, 0x4d, 0xa5, 0xf6, 0x05, 0x99, 0xd7, 0x60, 0x6a,
	0x91, 0xb1, 0x6d, 0x80, 0xde, 0x57, 0x35, 0x8c, 0xa1, 0x12, 0x18, 0xdb, 0x2d, 0xa5, 0xe9, 0x45,
	0xbb, 0xa1, 0xe1, 0x72, 0xb1, 0xdb, 0x64, 0x0b, 0xf6, 0x45, 0xf3, 0x49, 0xcc, 0x53, 0x3b, 0x88,
	0xed, 0xcf, 0xc8, 0x7d, 0xb8, 0xeb, 0x69, 0x3e, 0x79, 0x24, 0x99, 0x19, 0xc8, 0x76, 0xc9, 0xeb,
	0x26, 0x0b, 0x52, 0xc5, 0x73, 0x4a, 0x2f, 0x04, 0xf9, 0x60, 0xda, 0xa3, 0x19, 0x20, 0xf8, 0x6b,
	0xd8, 0xc6, 0x44, 0x68, 0x9a, 0xa4, 0xf1, 0x16, 0x5a, 0xa4, 0x53, 0xf1, 0x81, 0x1e, 0xcb, 0x20,
	0x1f, 0x96, 0xa8, 0xa1, 0x0e, 0xc3, 0xdb, 0xa8, 0x0e, 0x0e, 0xef, 0x12, 0xf6, 0xef, 0x01, 0x6c,
	0x44, 0xd6, 0xa5, 0x10, 0x7d, 0xdb, 0x1f, 0x9e, 0xdb, 0x7e, 0x93, 0xfc, 0x08, 0xea, 0x20, 0xeb,
	0xc2, 0x3f, 0x81, 0xb1, 0x63, 0x73, 0x7f, 0x9f, 0x7c, 0x54, 0xba, 0x76, 0x1d, 0xa8, 0xf6, 0x2a,
	0x76, 0x1c, 0x90, 0x8f, 0x93, 0x62, 0x4f, 0x7c, 0xf2, 0xee, 0xd9, 0xe1, 0x6e, 0x07, 0x06, 0xdf,
	0x29, 0xbf, 0x7b, 0xc6, 0x98, 0xe8, 0xcb, 0x1c, 0xb4, 0x0d, 0xf2, 0x30, 0xfa, 0x50, 0x10, 0xdb,
	0x8d, 0xaf, 0xd1, 0x9d, 0xcc, 0x11, 0xdc, 0xe1, 0xae, 0x4b, 0x87, 0x70, 0x2d, 0x6a, 0x6a, 0x47,
	0xfa, 0xfb, 0x57, 0x8f, 0xf4, 0x0c, 0x4d, 0x9d, 0xe7, 0x7f, 0xa8, 0xa0, 0x3b, 0x3d, 0xdb, 0xa5,
	0xc1, 0xb7, 0xfe, 0x88, 0xfa, 0x3d, 0x61, 0x8b, 0x30, 0x90, 0x7f, 0x69, 0xf4, 0x44, 0x97, 0x26,
	0x9c, 0xee, 0xf0, 0x44, 0x97, 0x16, 0x7c, 0x17, 0x94, 0x80, 0xe4, 0xbb, 0x20, 0xa0, 0xef, 0xa1,
	0x9a, 0x19, 0xa8, 0xab, 0x20, 0x9c, 0xe1, 0xcb, 0x56, 0xea, 0x90, 0x3f, 0xc4, 0x3e, 0x0b, 0xd8,
	0xc0, 0xa5, 0xdf, 0x7a, 0xc7, 0x3e, 0xf7, 0x84, 0x7a, 0x9e, 0xe5, 0xbc, 0x8d, 0x17, 0x68, 0xa3,
	0x70, 0x32, 0xd7, 0x78, 0xa1, 0x16, 0xf2, 0xd4, 0x22, 0xff, 0x52, 0x41, 0x77, 0xfb, 0x8c, 0xfe,
	0x2e, 0xb9, 0x1e, 0x85, 0x82, 0x27, 0xcf, 0x3c, 0xb8, 0x2b, 0xd0, 0xdc, 0x73, 0x35, 0xe3, 0x49,
	0x9f, 0x9f, 0x73, 0xb3, 0x9e, 0x9f, 0xda, 0xb7, 0x9f, 0xf9, 0x69, 0xdf, 0x7e, 0x16, 0x72, 0xdf,
	0x7e, 0xe2, 0x6f, 0x57, 0xd5, 0xf4, 0xdb, 0x55, 0xe3, 0xd7, 0x68, 0xb3, 0x74, 0xd2, 0x01, 0xfe,
	0xb9, 0x96, 0x90, 0x4f, 0xae, 0x26, 0xa4, 0x94, 0xab, 0x92, 0xf2, 0xc7, 0x0a, 0x7a, 0x2f, 0x8b,
	0xf9, 0x86, 0xeb, 0x69, 0x49, 0x96, 0x5d, 0x79, 0xab, 0x65, 0xcf, 0x4d, 0x5b, 0xf6, 0x7c, 0xc9,
	0xb2, 0x17, 0x32, 0xcb, 0xb6, 0xd1, 0xbd, 0x29, 0xd3, 0x0a, 0xf0, 0xa1, 0xb6, 0xf0, 0x4f, 0xa7,
	0x2f, 0x3c, 0xc7, 0x8e, 0x96, 0x7e, 0xf4, 0xe8, 0xd5, 0x7f, 0xb6, 0x6e, 0xbc, 0x7a, 0xbd, 0x55,
	0xf9, 0xdb, 0xeb, 0xad, 0xca, 0xbf, 0x5f, 0x6f, 0x55, 0xbe, 0x7f, 0xb3, 0x75, 0xe3, 0xcf, 0x6f,
	0xb6, 0x6e, 0xfc, 0xea, 0xca, 0xbf, 0x3b, 0x06, 0x8b, 0xa0, 0x5f, 0xad, 0xff, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x75, 0x1d, 0x6d, 0x48, 0x2c, 0x19, 0x00, 0x00,
}

func (m *CatalogProductIndexEAVDecimalIDX) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CatalogProductIndexEAVDecimalIDX) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CatalogProductIndexEAVDecimalIDX) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SourceID != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.SourceID))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.StoreID != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.StoreID))
		i--
		dAtA[i] = 0x18
	}
	if m.AttributeID != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.AttributeID))
		i--
		dAtA[i] = 0x10
	}
	if m.EntityID != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.EntityID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CatalogProductIndexEAVDecimalIDXes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CatalogProductIndexEAVDecimalIDXes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CatalogProductIndexEAVDecimalIDXes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutputGen(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CoreConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoreConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoreConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VersionTe, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.VersionTe):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintOutputGen(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VersionTs, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.VersionTs):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintOutputGen(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Expires.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ScopeID != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ScopeID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Scope) > 0 {
		i -= len(m.Scope)
		copy(dAtA[i:], m.Scope)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.Scope)))
		i--
		dAtA[i] = 0x12
	}
	if m.ConfigID != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ConfigID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CoreConfigurations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoreConfigurations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoreConfigurations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutputGen(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomerAddressEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerAddressEntity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomerAddressEntity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VatRequestSuccess.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	{
		size, err := m.VatRequestID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	{
		size, err := m.VatRequestDate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		size, err := m.VatIsValid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size, err := m.VatID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if len(m.Telephone) > 0 {
		i -= len(m.Telephone)
		copy(dAtA[i:], m.Telephone)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.Telephone)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	{
		size, err := m.Suffix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	if len(m.Street) > 0 {
		i -= len(m.Street)
		copy(dAtA[i:], m.Street)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.Street)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	{
		size, err := m.RegionID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size, err := m.Region.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size, err := m.Postcode.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size, err := m.Middlename.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.Lastname) > 0 {
		i -= len(m.Lastname)
		copy(dAtA[i:], m.Lastname)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.Lastname)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Firstname) > 0 {
		i -= len(m.Firstname)
		copy(dAtA[i:], m.Firstname)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.Firstname)))
		i--
		dAtA[i] = 0x5a
	}
	{
		size, err := m.Fax.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.CountryID) > 0 {
		i -= len(m.CountryID)
		copy(dAtA[i:], m.CountryID)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.CountryID)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size, err := m.Company.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x3a
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	n19, err19 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt):])
	if err19 != nil {
		return 0, err19
	}
	i -= n19
	i = encodeVarintOutputGen(dAtA, i, uint64(n19))
	i--
	dAtA[i] = 0x2a
	n20, err20 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err20 != nil {
		return 0, err20
	}
	i -= n20
	i = encodeVarintOutputGen(dAtA, i, uint64(n20))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.ParentID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.IncrementID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.EntityID != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.EntityID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomerAddressEntities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerAddressEntities) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomerAddressEntities) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutputGen(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomerEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerEntity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomerEntity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CustomerAddressEntities != nil {
		{
			size, err := m.CustomerAddressEntities.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutputGen(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	{
		size, err := m.LockExpires.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	{
		size, err := m.FirstFailure.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	{
		size, err := m.FailuresNum.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd2
	{
		size, err := m.Gender.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	{
		size, err := m.Confirmation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	{
		size, err := m.Taxvat.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		size, err := m.DefaultShipping.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size, err := m.DefaultBilling.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	{
		size, err := m.RpTokenCreatedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	{
		size, err := m.RpToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	{
		size, err := m.Dob.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size, err := m.Suffix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size, err := m.Lastname.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size, err := m.Middlename.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size, err := m.Firstname.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.CreatedIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.DisableAutoGroupChange != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.DisableAutoGroupChange))
		i--
		dAtA[i] = 0x50
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	n41, err41 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt):])
	if err41 != nil {
		return 0, err41
	}
	i -= n41
	i = encodeVarintOutputGen(dAtA, i, uint64(n41))
	i--
	dAtA[i] = 0x42
	n42, err42 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err42 != nil {
		return 0, err42
	}
	i -= n42
	i = encodeVarintOutputGen(dAtA, i, uint64(n42))
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.StoreID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.IncrementID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.GroupID != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.GroupID))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Email.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.WebsiteID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.EntityID != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.EntityID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomerEntities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerEntities) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomerEntities) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutputGen(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DmlgenTypes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DmlgenTypes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DmlgenTypes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ColChar2) > 0 {
		i -= len(m.ColChar2)
		copy(dAtA[i:], m.ColChar2)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.ColChar2)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	{
		size, err := m.ColChar1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc2
	if len(m.ColVarchar16) > 0 {
		i -= len(m.ColVarchar16)
		copy(dAtA[i:], m.ColVarchar16)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.ColVarchar16)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	{
		size, err := m.ColVarchar100.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb2
	if len(m.ColVarchar1) > 0 {
		i -= len(m.ColVarchar1)
		copy(dAtA[i:], m.ColVarchar1)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.ColVarchar1)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.ColTinyint1 != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ColTinyint1))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	{
		size, err := m.ColTimestamp2.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	n50, err50 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ColTimestamp1, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ColTimestamp1):])
	if err50 != nil {
		return 0, err50
	}
	i -= n50
	i = encodeVarintOutputGen(dAtA, i, uint64(n50))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x92
	{
		size, err := m.ColText.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x8a
	{
		size, err := m.IsSmallint5.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x82
	if m.HasSmallint5 {
		i--
		if m.HasSmallint5 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.ColSmallint4 != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ColSmallint4))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	{
		size, err := m.ColSmallint3.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	if m.ColSmallint2 != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ColSmallint2))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	{
		size, err := m.ColSmallint1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	if len(m.ColMediumtext2) > 0 {
		i -= len(m.ColMediumtext2)
		copy(dAtA[i:], m.ColMediumtext2)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.ColMediumtext2)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	{
		size, err := m.ColMediumtext1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	if len(m.ColMediumblob) > 0 {
		i -= len(m.ColMediumblob)
		copy(dAtA[i:], m.ColMediumblob)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.ColMediumblob)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.ColLongtext2) > 0 {
		i -= len(m.ColLongtext2)
		copy(dAtA[i:], m.ColLongtext2)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.ColLongtext2)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	{
		size, err := m.ColLongtext1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	if m.ColInt4 != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ColInt4))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	{
		size, err := m.ColInt3.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	if m.ColInt2 != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ColInt2))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	{
		size, err := m.ColInt1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size, err := m.ColDecimal2412.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size, err := m.ColDecimal206.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size, err := m.ColDecimal123.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size, err := m.PriceB124.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size, err := m.PriceA124.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.ColDecimal124.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.ColDecimal101.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	n66, err66 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ColDatetime2, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ColDatetime2):])
	if err66 != nil {
		return 0, err66
	}
	i -= n66
	i = encodeVarintOutputGen(dAtA, i, uint64(n66))
	i--
	dAtA[i] = 0x52
	{
		size, err := m.ColDatetime1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	n68, err68 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ColDate2, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ColDate2):])
	if err68 != nil {
		return 0, err68
	}
	i -= n68
	i = encodeVarintOutputGen(dAtA, i, uint64(n68))
	i--
	dAtA[i] = 0x42
	{
		size, err := m.ColDate1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.ColBlob) > 0 {
		i -= len(m.ColBlob)
		copy(dAtA[i:], m.ColBlob)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.ColBlob)))
		i--
		dAtA[i] = 0x32
	}
	if m.ColBigint4 != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ColBigint4))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.ColBigint3.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ColBigint2 != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ColBigint2))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.ColBigint1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ID != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DmlgenTypesCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DmlgenTypesCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DmlgenTypesCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutputGen(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SalesOrderStatusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SalesOrderStatusState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SalesOrderStatusState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VisibleOnFront != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.VisibleOnFront))
		i--
		dAtA[i] = 0x20
	}
	if m.IsDefault {
		i--
		if m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SalesOrderStatusStates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SalesOrderStatusStates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SalesOrderStatusStates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutputGen(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ViewCustomerAutoIncrement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewCustomerAutoIncrement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewCustomerAutoIncrement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Lastname) > 0 {
		i -= len(m.Lastname)
		copy(dAtA[i:], m.Lastname)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.Lastname)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Firstname) > 0 {
		i -= len(m.Firstname)
		copy(dAtA[i:], m.Firstname)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.Firstname)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Email.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.CeEntityID != 0 {
		i = encodeVarintOutputGen(dAtA, i, uint64(m.CeEntityID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ViewCustomerAutoIncrements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewCustomerAutoIncrements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewCustomerAutoIncrements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutputGen(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ViewCustomerNoAutoIncrement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewCustomerNoAutoIncrement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewCustomerNoAutoIncrement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Lastname) > 0 {
		i -= len(m.Lastname)
		copy(dAtA[i:], m.Lastname)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.Lastname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Firstname) > 0 {
		i -= len(m.Firstname)
		copy(dAtA[i:], m.Firstname)
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.Firstname)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Email.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutputGen(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ViewCustomerNoAutoIncrements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewCustomerNoAutoIncrements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewCustomerNoAutoIncrements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutputGen(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintOutputGen(dAtA []byte, offset int, v uint64) int {
	offset -= sovOutputGen(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CatalogProductIndexEAVDecimalIDX) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntityID != 0 {
		n += 1 + sovOutputGen(uint64(m.EntityID))
	}
	if m.AttributeID != 0 {
		n += 1 + sovOutputGen(uint64(m.AttributeID))
	}
	if m.StoreID != 0 {
		n += 1 + sovOutputGen(uint64(m.StoreID))
	}
	l = m.Value.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	if m.SourceID != 0 {
		n += 1 + sovOutputGen(uint64(m.SourceID))
	}
	return n
}

func (m *CatalogProductIndexEAVDecimalIDXes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovOutputGen(uint64(l))
		}
	}
	return n
}

func (m *CoreConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigID != 0 {
		n += 1 + sovOutputGen(uint64(m.ConfigID))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	if m.ScopeID != 0 {
		n += 1 + sovOutputGen(uint64(m.ScopeID))
	}
	l = m.Expires.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VersionTs)
	n += 1 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VersionTe)
	n += 1 + l + sovOutputGen(uint64(l))
	return n
}

func (m *CoreConfigurations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovOutputGen(uint64(l))
		}
	}
	return n
}

func (m *CustomerAddressEntity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntityID != 0 {
		n += 1 + sovOutputGen(uint64(m.EntityID))
	}
	l = m.IncrementID.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.ParentID.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovOutputGen(uint64(l))
	if m.IsActive {
		n += 2
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	l = m.Company.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = len(m.CountryID)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	l = m.Fax.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = len(m.Firstname)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	l = len(m.Lastname)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	l = m.Middlename.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Postcode.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Prefix.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Region.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.RegionID.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = len(m.Street)
	if l > 0 {
		n += 2 + l + sovOutputGen(uint64(l))
	}
	l = m.Suffix.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = len(m.Telephone)
	if l > 0 {
		n += 2 + l + sovOutputGen(uint64(l))
	}
	l = m.VatID.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.VatIsValid.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.VatRequestDate.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.VatRequestID.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.VatRequestSuccess.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	return n
}

func (m *CustomerAddressEntities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovOutputGen(uint64(l))
		}
	}
	return n
}

func (m *CustomerEntity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntityID != 0 {
		n += 1 + sovOutputGen(uint64(m.EntityID))
	}
	l = m.WebsiteID.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Email.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	if m.GroupID != 0 {
		n += 1 + sovOutputGen(uint64(m.GroupID))
	}
	l = m.IncrementID.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.StoreID.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovOutputGen(uint64(l))
	if m.IsActive {
		n += 2
	}
	if m.DisableAutoGroupChange != 0 {
		n += 1 + sovOutputGen(uint64(m.DisableAutoGroupChange))
	}
	l = m.CreatedIn.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Prefix.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Firstname.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Middlename.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Lastname.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Suffix.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.Dob.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.RpToken.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.RpTokenCreatedAt.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.DefaultBilling.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.DefaultShipping.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.Taxvat.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.Confirmation.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.Gender.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.FailuresNum.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.FirstFailure.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.LockExpires.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	if m.CustomerAddressEntities != nil {
		l = m.CustomerAddressEntities.Size()
		n += 2 + l + sovOutputGen(uint64(l))
	}
	return n
}

func (m *CustomerEntities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovOutputGen(uint64(l))
		}
	}
	return n
}

func (m *DmlgenTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovOutputGen(uint64(m.ID))
	}
	l = m.ColBigint1.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	if m.ColBigint2 != 0 {
		n += 1 + sovOutputGen(uint64(m.ColBigint2))
	}
	l = m.ColBigint3.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	if m.ColBigint4 != 0 {
		n += 1 + sovOutputGen(uint64(m.ColBigint4))
	}
	l = len(m.ColBlob)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	l = m.ColDate1.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ColDate2)
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.ColDatetime1.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ColDatetime2)
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.ColDecimal101.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.ColDecimal124.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.PriceA124.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.PriceB124.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.ColDecimal123.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.ColDecimal206.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.ColDecimal2412.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.ColInt1.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	if m.ColInt2 != 0 {
		n += 2 + sovOutputGen(uint64(m.ColInt2))
	}
	l = m.ColInt3.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	if m.ColInt4 != 0 {
		n += 2 + sovOutputGen(uint64(m.ColInt4))
	}
	l = m.ColLongtext1.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = len(m.ColLongtext2)
	if l > 0 {
		n += 2 + l + sovOutputGen(uint64(l))
	}
	l = len(m.ColMediumblob)
	if l > 0 {
		n += 2 + l + sovOutputGen(uint64(l))
	}
	l = m.ColMediumtext1.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = len(m.ColMediumtext2)
	if l > 0 {
		n += 2 + l + sovOutputGen(uint64(l))
	}
	l = m.ColSmallint1.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	if m.ColSmallint2 != 0 {
		n += 2 + sovOutputGen(uint64(m.ColSmallint2))
	}
	l = m.ColSmallint3.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	if m.ColSmallint4 != 0 {
		n += 2 + sovOutputGen(uint64(m.ColSmallint4))
	}
	if m.HasSmallint5 {
		n += 3
	}
	l = m.IsSmallint5.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.ColText.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ColTimestamp1)
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.ColTimestamp2.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	if m.ColTinyint1 != 0 {
		n += 2 + sovOutputGen(uint64(m.ColTinyint1))
	}
	l = len(m.ColVarchar1)
	if l > 0 {
		n += 2 + l + sovOutputGen(uint64(l))
	}
	l = m.ColVarchar100.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = len(m.ColVarchar16)
	if l > 0 {
		n += 2 + l + sovOutputGen(uint64(l))
	}
	l = m.ColChar1.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = len(m.ColChar2)
	if l > 0 {
		n += 2 + l + sovOutputGen(uint64(l))
	}
	return n
}

func (m *DmlgenTypesCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovOutputGen(uint64(l))
		}
	}
	return n
}

func (m *SalesOrderStatusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	if m.IsDefault {
		n += 2
	}
	if m.VisibleOnFront != 0 {
		n += 1 + sovOutputGen(uint64(m.VisibleOnFront))
	}
	return n
}

func (m *SalesOrderStatusStates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovOutputGen(uint64(l))
		}
	}
	return n
}

func (m *ViewCustomerAutoIncrement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CeEntityID != 0 {
		n += 1 + sovOutputGen(uint64(m.CeEntityID))
	}
	l = m.Email.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = len(m.Firstname)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	l = len(m.Lastname)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	return n
}

func (m *ViewCustomerAutoIncrements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovOutputGen(uint64(l))
		}
	}
	return n
}

func (m *ViewCustomerNoAutoIncrement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Email.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = len(m.Firstname)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	l = len(m.Lastname)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	return n
}

func (m *ViewCustomerNoAutoIncrements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovOutputGen(uint64(l))
		}
	}
	return n
}

func sovOutputGen(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOutputGen(x uint64) (n int) {
	return sovOutputGen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CatalogProductIndexEAVDecimalIDX) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatalogProductIndexEAVDecimalIDX: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatalogProductIndexEAVDecimalIDX: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			m.EntityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntityID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeID", wireType)
			}
			m.AttributeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributeID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceID", wireType)
			}
			m.SourceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CatalogProductIndexEAVDecimalIDXes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatalogProductIndexEAVDecimalIDXes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatalogProductIndexEAVDecimalIDXes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &CatalogProductIndexEAVDecimalIDX{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoreConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoreConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoreConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigID", wireType)
			}
			m.ConfigID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeID", wireType)
			}
			m.ScopeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScopeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Expires.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VersionTs, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionTe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VersionTe, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoreConfigurations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoreConfigurations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoreConfigurations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &CoreConfiguration{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerAddressEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerAddressEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerAddressEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			m.EntityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntityID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncrementID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ParentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Company.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fax", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Firstname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Firstname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lastname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Middlename", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Middlename.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postcode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Postcode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Region.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegionID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Suffix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VatID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatIsValid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VatIsValid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatRequestDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VatRequestDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatRequestID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VatRequestID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatRequestSuccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VatRequestSuccess.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerAddressEntities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerAddressEntities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerAddressEntities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &CustomerAddressEntity{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			m.EntityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntityID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WebsiteID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Email.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncrementID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoreID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAutoGroupChange", wireType)
			}
			m.DisableAutoGroupChange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisableAutoGroupChange |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreatedIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Firstname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Firstname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Middlename", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Middlename.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Lastname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Suffix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Dob.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RpToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpTokenCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RpTokenCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBilling", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultBilling.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultShipping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultShipping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taxvat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Taxvat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Confirmation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailuresNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FailuresNum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FirstFailure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockExpires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockExpires.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerAddressEntities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomerAddressEntities == nil {
				m.CustomerAddressEntities = &CustomerAddressEntities{}
			}
			if err := m.CustomerAddressEntities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerEntities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerEntities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerEntities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &CustomerEntity{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DmlgenTypes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DmlgenTypes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DmlgenTypes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBigint1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColBigint1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBigint2", wireType)
			}
			m.ColBigint2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColBigint2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBigint3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColBigint3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBigint4", wireType)
			}
			m.ColBigint4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColBigint4 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBlob", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColBlob = append(m.ColBlob[:0], dAtA[iNdEx:postIndex]...)
			if m.ColBlob == nil {
				m.ColBlob = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDate1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColDate1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDate2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ColDate2, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDatetime1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColDatetime1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDatetime2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ColDatetime2, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal101", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColDecimal101.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal124", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColDecimal124.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceA124", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceA124.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceB124", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceB124.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal123", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColDecimal123.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal206", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColDecimal206.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal2412", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColDecimal2412.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColInt1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColInt1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColInt2", wireType)
			}
			m.ColInt2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColInt2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColInt3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColInt3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColInt4", wireType)
			}
			m.ColInt4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColInt4 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColLongtext1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColLongtext1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColLongtext2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColLongtext2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColMediumblob", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColMediumblob = append(m.ColMediumblob[:0], dAtA[iNdEx:postIndex]...)
			if m.ColMediumblob == nil {
				m.ColMediumblob = []byte{}
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColMediumtext1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColMediumtext1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColMediumtext2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColMediumtext2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColSmallint1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColSmallint1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColSmallint2", wireType)
			}
			m.ColSmallint2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColSmallint2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColSmallint3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColSmallint3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColSmallint4", wireType)
			}
			m.ColSmallint4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColSmallint4 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasSmallint5", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasSmallint5 = bool(v != 0)
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSmallint5", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IsSmallint5.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColText", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColText.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColTimestamp1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ColTimestamp1, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColTimestamp2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColTimestamp2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColTinyint1", wireType)
			}
			m.ColTinyint1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColTinyint1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColVarchar1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColVarchar1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColVarchar100", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColVarchar100.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColVarchar16", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColVarchar16 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColChar1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColChar1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColChar2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColChar2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DmlgenTypesCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DmlgenTypesCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DmlgenTypesCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &DmlgenTypes{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SalesOrderStatusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SalesOrderStatusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SalesOrderStatusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibleOnFront", wireType)
			}
			m.VisibleOnFront = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisibleOnFront |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SalesOrderStatusStates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SalesOrderStatusStates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SalesOrderStatusStates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &SalesOrderStatusState{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewCustomerAutoIncrement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewCustomerAutoIncrement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewCustomerAutoIncrement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CeEntityID", wireType)
			}
			m.CeEntityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CeEntityID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Email.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Firstname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Firstname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lastname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewCustomerAutoIncrements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewCustomerAutoIncrements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewCustomerAutoIncrements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ViewCustomerAutoIncrement{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewCustomerNoAutoIncrement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewCustomerNoAutoIncrement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewCustomerNoAutoIncrement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Email.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Firstname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Firstname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lastname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewCustomerNoAutoIncrements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewCustomerNoAutoIncrements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewCustomerNoAutoIncrements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutputGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ViewCustomerNoAutoIncrement{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOutputGen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOutputGen
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOutputGen
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOutputGen
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOutputGen        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOutputGen          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOutputGen = fmt.Errorf("proto: unexpected end of group")
)
